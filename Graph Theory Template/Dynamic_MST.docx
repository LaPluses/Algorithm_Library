动态最小生成树是一类要求给定图，对于图的边有删除，插入，修改边权操作，满足查询MST（Minimum Spanning Tree ）的问题。

　　在这里我们考虑修改边的操作，删除可以看成是将边权设成INF，插入可以看做是将一条INF的边边权赋值。

　　那么假设我们有q个询问，每个询问修改一条边的权值。

　　对于q个询问里修改的边，我们设这个边集为Q，全集为E，那么对于E-Q中的边，做一遍MST，MST中的边集设为G，那么对于E-Q-G中的边，不论询问怎么改变，这些边都不会在MST中，所以我们可以删除这些边，这时全集E不包括刚才删除的边，全集中的边的数量变成了n+q，n为MST中必要的边，q为询问中的边。之后将Q中的边的边权都赋值为-ING，这时做一遍MST，如果E-Q的边在MST中，这时代表就算修改的边最小时这些边也要选，也就是这些边是保证MST连通性的必要的边，这些边我们也没有必要考虑，因为必须要选，所以将这条边连接的两个点合并成一个点，可以用并查集维护。那么这些操作之后，我们将边的规模变成了q的，点的规模变成了q的。那么我求出来询问包括1-q的情况了，在剩下的这张图（规模变小了）上，将询问的范围变成1-q>>1和q<<1-q，再递归的做下去，因为询问的不断地变小，每次都会有更多的边被缩掉（在第二次做MST时可以缩掉的边），每次边的规模都变成了q/2^dep，这样一共会有log2q层，每层做MST是qlog2q的，那么总的时间复杂度就是q(log2q，我们递归的时候不用每次都排序，可以保存原来有序的边集，所以可以去掉一个log2q，这样时间复杂度就变成了qlog2q。